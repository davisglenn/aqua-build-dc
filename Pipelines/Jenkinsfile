pipeline {

    agent any

    environment {
        PIPELINE_REPO = "https://github.com/davisglenn/aqua-build-dc.git"
        PIPELINE_BRANCH = "main"
        PIPELINE_WORKSPACE = "/var/lib/jenkins/workspace/Build_Domain_Controller"
        FAILED = "true"
        }


stages {

      stage('Install Docker') {
          steps {
              script{
                  rc = sh (
                          script:  'ansible-playbook -i ${PIPELINE_WORKSPACE}/Inventories ${PIPELINE_WORKSPACE}/Pipelines/playbooks/build-dc.yml --tags=install-docker' 
                  )
              }
          }
      }
      stage('Scan DNSmasq for Vulnerabilites') {
          steps {
              script{
                  rc = sh (
                          script:  'trivy client --clear-cache=false --exit-code=1 --severity=CRITICAL --remote http://192.168.5.9:9999 jpillora/dnsmasq' 
                  )
              }
          }
      }
      stage('Create DNSmasq container') {
          steps {
              script{
                    sh 'echo ${FAILED}'
/*                  rc = sh (
                          script:  'ansible-playbook -i ${PIPELINE_WORKSPACE}/Inventories ${PIPELINE_WORKSPACE}/Pipelines/playbooks/build-dc.yml --tags=dnsmasq' 
                  )
*/
              }
          }
      }
        stage('Scan NTP for Vulnerabilites') {
            steps {
                script{
                    catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                        sh (
                            script: 'ansible-playbook -i ${PIPELINE_WORKSPACE}/Inventories ${PIPELINE_WORKSPACE}/Pipelines/playbooks/trivy-scan.yml -e "dockername=ntp"'
                        )
                        env.PASSED = 'true'
                    }
                    println('PASSED =' + env.PASSED)
                }
            }
        }
        stage('Create NTP container') {
            steps {
                script{
                    catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                        if (env.PASSED != 'true') {
                            sh 'echo "failed = ${PASSED}"'
                            sh 'exit 1'
                        }
                        sh ( 
                            script: 'ansible-playbook -i ${PIPELINE_WORKSPACE}/Inventories ${PIPELINE_WORKSPACE}/Pipelines/playbooks/build-dc.yml --tags=ntp'
                        )
                    }

                }
            }
        }
      stage('Scan LDAP for Vulnerabilites') {
          steps {
              script{
                  rc = sh (
                          script:  'trivy client --clear-cache=false --exit-code=1 --severity=CRITICAL --remote http://192.168.5.9:9999 bitnami/openldap' 
                  )
              }
          }
      }
      stage('Create LDAP container') {
          steps {
              script{
                  rc = sh (
                          script:  'ansible-playbook -i ${PIPELINE_WORKSPACE}/Inventories ${PIPELINE_WORKSPACE}/Pipelines/playbooks/build-dc.yml --tags=ldap'
                  )
              }
          }
      }
  }
}
